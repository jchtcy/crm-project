package com.jch.crm.workbench.mapper;

import com.jch.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Sep 12 16:02:56 CST 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Sep 12 16:02:56 CST 2023
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Sep 12 16:02:56 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Sep 12 16:02:56 CST 2023
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Tue Sep 12 16:02:56 CST 2023
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 保存创建的市场活动
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询市场活动列表
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 根据条件查询市场活动的总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据ids批量删除市场活动
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 通过id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 保存修改市场活动
     * @param activity
     * @return
     */
    int updateEditActivity(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivitys();

    /**
     * 通过id查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);

    /**
     * 批量保存创建的市场活动
     * @param activityList
     * @return
     */
    int insetActivityByList(List<Activity> activityList);

    /**
     * 通过id查询市场活动详情
     * @param id
     * @return
     */
    Activity selectActivityDetailById(String id);

    /**
     * 根据name模糊查询市场活动, 并且把已经跟clueId关联过的市场活动排除
     * @param map
     * @return
     */
    List<Activity> selectActivityDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据ids查询市场活动的明细信息
     * @param ids
     * @return
     */
    List<Activity> selectActivityDetailByIds(String[] ids);

    /**
     * 根据线索id查询线索关联的市场活动列表
     * @param clueId
     * @return
     */
    List<Activity> selectActivityDetailByClueId(String clueId);
}